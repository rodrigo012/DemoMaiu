// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using System.Threading.Tasks;
using ZNMC = ZXing.Net.Maui.Controls;
using ZXing.Net.Maui;

namespace BlazorBindings.Maui.Elements.ZXing.Net
{
    public partial class CameraBarcodeReaderView : BlazorBindings.Maui.Elements.View
    {
        static CameraBarcodeReaderView()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public CameraLocation? CameraLocation { get; set; }
        [Parameter] public bool? IsDetecting { get; set; }
        [Parameter] public bool? IsTorchOn { get; set; }
        [Parameter] public BarcodeReaderOptions Options { get; set; }
        [Parameter] public EventCallback<BarcodeDetectionEventArgs> OnBarcodesDetected { get; set; }
        [Parameter] public EventCallback<CameraFrameBufferEventArgs> OnFrameReady { get; set; }

        public new ZNMC.CameraBarcodeReaderView NativeControl => (ZNMC.CameraBarcodeReaderView)((Element)this).NativeControl;

        protected override MC.Element CreateNativeElement() => new ZNMC.CameraBarcodeReaderView();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CameraLocation):
                    if (!Equals(CameraLocation, value))
                    {
                        CameraLocation = (CameraLocation?)value;
                        NativeControl.CameraLocation = CameraLocation ?? (CameraLocation)ZNMC.CameraBarcodeReaderView.CameraLocationProperty.DefaultValue;
                    }
                    break;
                case nameof(IsDetecting):
                    if (!Equals(IsDetecting, value))
                    {
                        IsDetecting = (bool?)value;
                        NativeControl.IsDetecting = IsDetecting ?? (bool)ZNMC.CameraBarcodeReaderView.IsDetectingProperty.DefaultValue;
                    }
                    break;
                case nameof(IsTorchOn):
                    if (!Equals(IsTorchOn, value))
                    {
                        IsTorchOn = (bool?)value;
                        NativeControl.IsTorchOn = IsTorchOn ?? (bool)ZNMC.CameraBarcodeReaderView.IsTorchOnProperty.DefaultValue;
                    }
                    break;
                case nameof(Options):
                    if (!Equals(Options, value))
                    {
                        Options = (BarcodeReaderOptions)value;
                        NativeControl.Options = Options;
                    }
                    break;
                case nameof(OnBarcodesDetected):
                    if (!Equals(OnBarcodesDetected, value))
                    {
                        void NativeControlBarcodesDetected(object sender, BarcodeDetectionEventArgs e) => InvokeAsync(() => OnBarcodesDetected.InvokeAsync(e));

                        OnBarcodesDetected = (EventCallback<BarcodeDetectionEventArgs>)value;
                        NativeControl.BarcodesDetected -= NativeControlBarcodesDetected;
                        NativeControl.BarcodesDetected += NativeControlBarcodesDetected;
                    }
                    break;
                case nameof(OnFrameReady):
                    if (!Equals(OnFrameReady, value))
                    {
                        void NativeControlFrameReady(object sender, CameraFrameBufferEventArgs e) => InvokeAsync(() => OnFrameReady.InvokeAsync(e));

                        OnFrameReady = (EventCallback<CameraFrameBufferEventArgs>)value;
                        NativeControl.FrameReady -= NativeControlFrameReady;
                        NativeControl.FrameReady += NativeControlFrameReady;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
